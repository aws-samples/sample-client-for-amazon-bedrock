name: "publish"

on:
  workflow_dispatch: # 允许手动触发
  push:
    branches:
      'release'

# This is the example from the readme.
# On each push to the `release` branch it will create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  publish-android:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Node.js dependencies
        run: yarn install

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          sdk-platform: "android-33"
          build-tools: "33.0.1"

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'

      - name: Install Flutter dependencies
        run: |
          cd flutter_app
          flutter clean
          flutter pub cache repair
          flutter pub get

      - name: Export web assets
        run: yarn export

      - name: Prepare Flutter assets
        run: |
          mkdir -p ./flutter_app/assets
          zip -r ./flutter_app/assets/out.zip out

      - name: Build Android APK
        run: |
          cd flutter_app
          flutter build apk --release

      - name: Get app version
        id: get_version
        run: |
          VERSION=$(grep -o '"version": "[^"]*' src-tauri/tauri.conf.json | cut -d'"' -f4)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload Android APK to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: app-v${{ env.VERSION }}
          files: flutter_app/build/app/outputs/flutter-apk/app-release.apk
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-ios:
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Node.js dependencies
        run: yarn install

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'

      - name: Verify Flutter version
        run: flutter --version

      - name: Install Flutter dependencies with clean
        run: |
          cd flutter_app
          flutter clean
          flutter pub cache repair
          flutter pub get

      # Use the exact same command as in package.json for consistency
      - name: Build iOS app using package.json script pattern
        run: |
          # Export web assets
          yarn export
          
          # Create assets directory and zip output
          mkdir -p ./flutter_app/assets
          zip -r ./flutter_app/assets/out.zip out

      - name: Install Cocoapods
        run: |
          sudo gem install cocoapods
          pod --version

      - name: Prepare iOS build
        run: |
          cd flutter_app
          flutter clean
          flutter pub get
          cd ios
          rm -rf Pods Podfile.lock
          pod install --repo-update

      # Optional: Setup code signing if secrets are available
      - name: Install Apple Certificate
        if: env.APPLE_CERTIFICATE != ''
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'temporary_password' }}
        run: |
          # Create a temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate to keychain
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Set up provisioning profiles if available
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Clean up
          rm certificate.p12

      - name: Build iOS (Debug)
        run: |
          cd flutter_app
          flutter build ios --debug --no-codesign

      - name: List build directories
        run: |
          find flutter_app/build -type d -name "*Debug*" || echo "No Debug directories found"
          find flutter_app/build -name "Runner.app" || echo "No Runner.app found"
          ls -la flutter_app/build/ios/ || echo "No ios directory"

      - name: Create Debug IPA
        run: |
          mkdir -p flutter_app/build/ios/Debug-iphonesimulator/Payload
          find flutter_app/build -name "Runner.app" -type d | xargs -I{} cp -r {} flutter_app/build/ios/Debug-iphonesimulator/Payload/ || echo "Failed to copy Runner.app"
          cd flutter_app/build/ios/Debug-iphonesimulator
          zip -r debug-ios-app.zip Payload || echo "Failed to create zip"

      - name: Upload Debug IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-debug-app
          path: flutter_app/build/ios/Debug-iphonesimulator/debug-ios-app.zip
          retention-days: 7
          if-no-files-found: warn
